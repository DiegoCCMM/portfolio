/* adac_4.java */
/* Generated By:JavaCC: Do not edit this line. adac_4.java */
package traductor;

import lib.symbolTable.SymbolTable;
import lib.symbolTable.*;
import lib.attributes.Attributes;
import lib.symbolTable.exceptions.*;
import lib.errores.*;
import lib.tools.*;
import java.util.*;

public class adac_4 implements adac_4Constants {

   static SymbolTable tabla_simbolos = new SymbolTable();
   static SemanticFunctions SemFunc = new SemanticFunctions();
   static ErrorSemantico ErrorSemantico = new ErrorSemantico();
   static Symbol.Types tipo_funcion = null;
   static boolean hay_return = false;

    public static void main(String [] args)
  {
    adac_4 parser;
    try
    {
      if (args.length == 0)
      { //entrada desde stdin
        parser = new adac_4(System.in);
        System.out.println("Leyendo de la entrada estandar...");
      }
      else
      { //entrada desde fichero en args[0]
        parser = new adac_4(new java.io.FileInputStream(args [0]));
      }
      parser.programa(); //invoca simbolo inicial de la gramatica
    }
    catch (java.io.FileNotFoundException e) {
      System.err.println("Fichero " + args [0] + " no encontrado.");
    }
    catch (TokenMgrError e)    {
      errorLexico(token);
    }
    catch(ParseException e) {
                //errorSintactico(e);
   }
  //System.out.println(tabla_simbolos.toString());
   System.out.println("FIN");
  }

  static void errorLexico(Token t) {
    System.err.println("ERROR LEXICO (" + SimpleCharStream.getBeginLine() +
    ", " + SimpleCharStream.getBeginColumn() + "): simbolo no reconocido: <" +
    SimpleCharStream.GetImage().charAt(adac_4TokenManager.curLexState) + ">");
  }


  static void errorSintactico(ParseException e){
    String msg ="ERROR SINTACTICO (" + e.currentToken.next.beginLine + ", " + e.currentToken.next.beginColumn
     + "): encontrado: <" + e.currentToken.next.image + "> Se esperaba:  ";
     for(int i=0; i< e.expectedTokenSequences.length; i++) {
                msg+="  " + e.tokenImage[e.expectedTokenSequences[i][0]];
     }
    System.err.println(msg);
  }

  static void panic_mode(int kind) {
    Token t = adac_4.getNextToken();
    while (token.kind != kind && token.kind != EOF)
    {
      token = adac_4.getNextToken();
    }
    String error_msg = "PANIC MODE (<" + t.beginLine + ", " +
    t.beginColumn + ">) : ignorando entrada hasta ";
    if (kind == tEND) {
        error_msg += " [end]";
        }else {
                 error_msg += " [;]";
        }
    System.err.println(error_msg);
  }

/*programa ::= <tPROCEDURE> <tID> <tIS> declaracion_variables declaracion_acciones bloque_sentencias <EOF> */
  static final public void programa() throws ParseException {
    jj_consume_token(tPROCEDURE);
    jj_consume_token(tID);
    jj_consume_token(tIS);
tabla_simbolos.insertBlock();
    declaracion_variables();
    declaracion_acciones();
    bloque_sentencias();
    jj_consume_token(0);
}

/***DECLARACION DE VARIABLES***/
/*declaracion_variables ::= ( declaracion <tPC> )* */
  static final public void declaracion_variables() throws ParseException {
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tINT:
        case tBOOL:
        case tCHAR:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        declaracion();
        jj_consume_token(tPC);
      }
    } catch (ParseException e) {
panic_mode(tPC);
        errorSintactico(e);
    }
}

/*declaracion ::= tipo_variables lista_vars */
  static final public void declaracion() throws ParseException {Symbol.Types tipo_variable;
    try {
      tipo_variable = tipo_variables();
      lista_vars(tipo_variable);
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*tipo_variables ::= ( <tINT> | <tCHAR> | <tBOOL> ) */
  static final public Symbol.Types tipo_variables() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tINT:{
        jj_consume_token(tINT);
{if ("" != null) return(Symbol.Types.INT);}
        break;
        }
      case tCHAR:{
        jj_consume_token(tCHAR);
{if ("" != null) return(Symbol.Types.CHAR);}
        break;
        }
      case tBOOL:{
        jj_consume_token(tBOOL);
{if ("" != null) return(Symbol.Types.BOOL);}
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
errorSintactico(e);
        {if ("" != null) return Symbol.Types.UNDEFINED;}
    }
    throw new Error("Missing return statement in function");
}

/*lista_vars := variable ( <tCOMA> variable )* */
  static final public  void lista_vars(Symbol.Types tipo_variable) throws ParseException {
    try {
      variable(tipo_variable);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMA:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(tCOMA);
        variable(tipo_variable);
      }
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*variable := <tID> declaracion_vector*/
  static final public  void variable(Symbol.Types tipo_variable) throws ParseException {Token t = null; Integer tamanyo_vector = null;
    try {
      t = jj_consume_token(tID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAV:{
        tamanyo_vector = declaracion_vector();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
try{
            SemFunc.insertar_simbolo_declaracion(tabla_simbolos, t, tipo_variable, tamanyo_vector);
        }catch(AlreadyDefinedSymbolException e){
            ErrorSemantico.deteccion(e, t);
        }
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*declaracion_vector ::= <tAV> <tVALORENTERO> <tCV> | epsilon */
  static final public  int declaracion_vector() throws ParseException {Token t;
    try {
      jj_consume_token(tAV);
      t = jj_consume_token(tVALORENTERO);
      jj_consume_token(tCV);
{if ("" != null) return(Integer.parseInt(t.image));}
    } catch (ParseException e) {
errorSintactico(e);
          {if ("" != null) return 0;} //TODO: anyadido para no tener error en ejecucion del compilador, si no recibe entero devuelve null

    }
    throw new Error("Missing return statement in function");
}

/***DECLARACION DE ACCIONES****/
/*declaracion_acciones ::= ( declaracion_accion )* */
  static final public void declaracion_acciones() throws ParseException {
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tPROCEDURE:
        case tFUNCTION:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        declaracion_accion();
      }
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*declaracion_accion ::= declaracion_funcion | declaracion_proc */
  static final public void declaracion_accion() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tFUNCTION:{
        declaracion_funcion();
        break;
        }
      case tPROCEDURE:{
        declaracion_proc();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*declaracion_funcion ::= cabecera_funcion declaracion_variables bloque_sentencias*/
  static final public void declaracion_funcion() throws ParseException {
    try {
      cabecera_funcion();
      declaracion_variables();
      bloque_sentencias();
tabla_simbolos.removeBlock();
     if(!hay_return){
        ErrorSemantico.deteccion("Las funciones tienen que terminar con un return",token);
     }
     tipo_funcion = null;
     hay_return = false;
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*cabecera_funcion ::= <tFUNCTION> tipo_variables <tID> parametros_formales <tIS>*/
  static final public void cabecera_funcion() throws ParseException {Token t = null;
ArrayList<Symbol> parametros_formales = new ArrayList<Symbol>();
Symbol.Types tipo_func;
SymbolFunction simbolo_funcion;
    try {
      jj_consume_token(tFUNCTION);
      tipo_func = tipo_variables();
      t = jj_consume_token(tID);
tipo_funcion = tipo_func;

    simbolo_funcion = new SymbolFunction(t.image, parametros_formales, tipo_func);
    tabla_simbolos.insertSymbol(simbolo_funcion);
    tabla_simbolos.insertBlock();
      parametros_formales(simbolo_funcion);
      jj_consume_token(tIS);
    } catch (ParseException e) {
errorSintactico(e);
    } catch (AlreadyDefinedSymbolException e) {
ErrorSemantico.deteccion(e, t);
    }
}

/*declaracion_proc ::= cabecera_proc declaracion_variables bloque_sentencias*/
  static final public void declaracion_proc() throws ParseException {
    try {
      cabecera_proc();
      declaracion_variables();
      bloque_sentencias();
tabla_simbolos.removeBlock();
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*cabecera_proc ::= <tPROCEDURE> <tID> parametros_formales <tIS>*/
  static final public void cabecera_proc() throws ParseException {Token t = null;
ArrayList<Symbol> parm_list = new ArrayList<Symbol>();
SymbolProcedure simbolo_procedure;
    try {
      jj_consume_token(tPROCEDURE);
      t = jj_consume_token(tID);
simbolo_procedure = new SymbolProcedure(t.image, parm_list);
  tabla_simbolos.insertSymbol(simbolo_procedure);
  tabla_simbolos.insertBlock();
      parametros_formales(simbolo_procedure);
      jj_consume_token(tIS);
    } catch (ParseException e) {
errorSintactico(e);
    } catch (AlreadyDefinedSymbolException e) {
ErrorSemantico.deteccion(e, t);
    }
}

/*parametros_formales ::= <tAP> ( parametros ( <tPC> parametros )* )? <tCP> */
  static final public void parametros_formales(Symbol simbolo_funcion) throws ParseException {
    try {
      jj_consume_token(tAP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tVAL:
      case tREF:{
        parametros(simbolo_funcion);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tPC:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_4;
          }
          jj_consume_token(tPC);
          parametros(simbolo_funcion);
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(tCP);
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*parametros ::= clase_parametros tipo_variables lista_parametros   */
  static final public void parametros(Symbol simbolo_funcion) throws ParseException {Symbol.Types tipo_parametro;
 Symbol.ParameterClass clase_parametro;
    try {
      clase_parametro = clase_parametros();
      tipo_parametro = tipo_variables();
      lista_parametros(tipo_parametro, clase_parametro, simbolo_funcion);
    } catch (ParseException e) {
errorSintactico(e);
    }
}

  static final public Symbol.ParameterClass clase_parametros() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tVAL:{
        jj_consume_token(tVAL);
{if ("" != null) return(Symbol.ParameterClass.VAL);}
        break;
        }
      case tREF:{
        jj_consume_token(tREF);
{if ("" != null) return(Symbol.ParameterClass.REF);}
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
errorSintactico(e);
    }
    throw new Error("Missing return statement in function");
}

/*lista_parametros ::= parametro (, parametro)**/
  static final public void lista_parametros(Symbol.Types tipo_parametro, Symbol.ParameterClass clase_parametro, Symbol simbolo_funcion) throws ParseException {
    try {
      parametro(tipo_parametro, clase_parametro, simbolo_funcion);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMA:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        jj_consume_token(tCOMA);
        parametro(tipo_parametro, clase_parametro, simbolo_funcion);
      }
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*parametro := <tID> parametro_vector*/
  static final public void parametro(Symbol.Types tipo_parametro, Symbol.ParameterClass clase_parametro, Symbol simbolo_funcion) throws ParseException {Token t = null; Integer tamanyo_vector = null; Symbol parametro = null;
    try {
      t = jj_consume_token(tID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAV:{
        tamanyo_vector = declaracion_vector();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
try
        {
            parametro = SemFunc.insertar_parametro(tabla_simbolos, t, tipo_parametro, tamanyo_vector, clase_parametro);
        }catch(AlreadyDefinedSymbolException e){
              ErrorSemantico.deteccion(e, t);
        }
        if(parametro != null)
            SemFunc.insertar_parametro_en_funcion(simbolo_funcion, parametro);
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/***BLOQUE SENTENCIAS**/

/*bloque_sentencias ::= <tBEGIN> lista_sentencias <tEND>*/
  static final public void bloque_sentencias() throws ParseException {
    try {
      jj_consume_token(tBEGIN);
      lista_sentencias();
      jj_consume_token(tEND);
    } catch (ParseException e) {
panic_mode(tEND);
        errorSintactico(e);
    }
}

/*lista_sentencias ::= sentencia**/
  static final public void lista_sentencias() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:
      case tFUNCTION:
      case tRETURN:
      case tIF:
      case tWHILE:
      case tPUT_L:
      case tSKIP_L:
      case tPUT:
      case tGET:
      case tID:{
        label_6:
        while (true) {
          sentencia();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tPROCEDURE:
          case tFUNCTION:
          case tRETURN:
          case tIF:
          case tWHILE:
          case tPUT_L:
          case tSKIP_L:
          case tPUT:
          case tGET:
          case tID:{
            ;
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            break label_6;
          }
        }
        break;
        }
      default:
        jj_la1[12] = jj_gen;

      }
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*lista_sentencias ::= sentencia**/
  static final public void sentencia() throws ParseException {Attributes atr; Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tGET:{
        leer();
        jj_consume_token(tPC);
        break;
        }
      case tSKIP_L:{
        skip_linea();
        jj_consume_token(tPC);
        break;
        }
      case tPUT:{
        escribir();
        jj_consume_token(tPC);
        break;
        }
      case tPUT_L:{
        escribir_linea();
        jj_consume_token(tPC);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        if (jj_2_1(2)) {
          invocacion_procedimiento();
        } else if (jj_2_2(2)) {
          asignacion();
          jj_consume_token(tPC);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tPROCEDURE:
          case tFUNCTION:{
            declaracion_accion();
            jj_consume_token(tPC);
            break;
            }
          case tIF:{
            seleccion();
            break;
            }
          case tWHILE:{
            mientras_que();
            break;
            }
          case tRETURN:{
            t = jj_consume_token(tRETURN);
            atr = expresion();
            jj_consume_token(tPC);
if(tipo_funcion != null){
                if(atr.type != tipo_funcion){
                    ErrorSemantico.deteccion("El tipo obtenido no coincide con la declaracion de la funcion",t);
                }
                hay_return = true;
            }else{
                ErrorSemantico.deteccion("La instruccion return solo se puede usar en funciones",t);
            }
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException e) {
panic_mode(tPC);
          errorSintactico(e);
    }
}

  static final public void leer() throws ParseException {
    try {
      jj_consume_token(tGET);
      jj_consume_token(tAP);
      lista_asignables();
      jj_consume_token(tCP);
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*lista_asignables() := (< tID >) lista_asignablesRec */
  static final public void lista_asignables() throws ParseException {Attributes atr = new Attributes(),atr_v=null; Symbol simbolo_del_factor = null; Token t;
    try {
      t = jj_consume_token(tID);
try{
        simbolo_del_factor = tabla_simbolos.getSymbol(t.image);
        atr = new Attributes(simbolo_del_factor);
    }catch(SymbolNotFoundException e){
        ErrorSemantico.deteccion(e, t);
    }
        atr.comprobacion_asignable_leer(t);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAV:{
        atr_v = asignable_vector(simbolo_del_factor,t);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
SemanticFunctions.comprobacion_no_asignacion_vector(atr_v,simbolo_del_factor,t); atr_v=null;
      lista_asignablesRec();
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*lista_asignablesRec ::= (asignable_vector)* */
  static final public void lista_asignablesRec() throws ParseException {Token t; Attributes atr = new Attributes(), atr_v=null; Symbol simbolo_del_factor = null;
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMA:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
        jj_consume_token(tCOMA);
        t = jj_consume_token(tID);
try{
        simbolo_del_factor = tabla_simbolos.getSymbol(t.image);
        atr = new Attributes(simbolo_del_factor);
    }catch(SymbolNotFoundException e){
        ErrorSemantico.deteccion(e, t);
    }
    atr.comprobacion_asignable_leer(t);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tAV:{
          atr_v = asignable_vector(simbolo_del_factor,t);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          ;
        }
SemanticFunctions.comprobacion_no_asignacion_vector(atr_v,simbolo_del_factor,t); atr_v=null;
      }
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*asignable_vector ::= <tAV> expresion <tCV> */
  static final public Attributes asignable_vector(Symbol sim_v, Token t_v) throws ParseException {Attributes atr=new Attributes();
    try {
      jj_consume_token(tAV);
      atr = expresion();
      jj_consume_token(tCV);
atr.comprobaciones_para_vectores(sim_v,t_v);
    } catch (ParseException e) {
errorSintactico(e);
    } finally {
{if ("" != null) return atr;}
    }
    throw new Error("Missing return statement in function");
}

/*skip_linea ::= <tSKIP_L> <tAP> <tCP>*/
  static final public void skip_linea() throws ParseException {
    try {
      jj_consume_token(tSKIP_L);
      jj_consume_token(tAP);
      jj_consume_token(tCP);
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*escribir ::= <tPUT> <tAP> lista_escribibles <tCP>*/
  static final public void escribir() throws ParseException {
    try {
      jj_consume_token(tPUT);
      jj_consume_token(tAP);
      lista_escribibles();
      jj_consume_token(tCP);
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*escribir_linea ::= <tPUT_L> <tAP> lista_escribibles <tCP>*/
  static final public void escribir_linea() throws ParseException {
    try {
      jj_consume_token(tPUT_L);
      jj_consume_token(tAP);
      cero_o_lista_escribibles();
      jj_consume_token(tCP);
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*cero_o_lista_escribibles ::= lista_escribibles() | epsilon */
  static final public void cero_o_lista_escribibles() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNOT:
      case tSUMA:
      case tRESTA:
      case tTRUE:
      case tFALSE:
      case tINT2CHAR:
      case tCHAR2INT:
      case tID:
      case tVALORENTERO:
      case tVALORCHAR:
      case tVALORCADENA:
      case tAP:{
        lista_escribibles();
        break;
        }
      default:
        jj_la1[18] = jj_gen;

      }
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*lista_escribibles ::=   expresion | <tVALORCHAR> | <tVALORCADENA> */
  static final public void lista_escribibles() throws ParseException {Attributes atr = new Attributes();
    try {
      atr = expresion();
atr.comprobacion_escribir(token);
      lista_escribiblesRec();
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/* lista_escribiblesRec ::= (<tCOMA> (expresion | <tVALORCHAR> | <tVALORCADENA> ) )* */
  static final public void lista_escribiblesRec() throws ParseException {Attributes atr = new Attributes();
    try {
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMA:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
        jj_consume_token(tCOMA);
        atr = expresion();
atr.comprobacion_escribir(token);
      }
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*asignacion ::= var_asignacion <tOPAS> expresion*/
  static final public void asignacion() throws ParseException {Attributes atr_v=null, atr_e=null; Token t;
    try {
      //TODO SI EL IDENTIFICAR NO SE ENCUENTRA EN LA TABLA DE SIMBOLOS SE CREA UNDEFINED O SE CREA CON EL TIPO ESPERADO DEL ATRIBUTO
        atr_v = var_asignacion();
      t = jj_consume_token(tOPAS);
      atr_e = expresion();
//Se utiliza el token de tOPAS para la info de los errores semanticos
    atr_v.comprobacion_asignacion(atr_e,t);
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/*var_asignacion ::= <tIDENTIFICADOR> var_Vector*/
  static final public Attributes var_asignacion() throws ParseException {Token t;
Attributes atr;
    try {
      t = jj_consume_token(tID);
      atr = var_vector(token);
{if ("" != null) return atr;}
    } catch (ParseException e) {
errorSintactico(e);
    }
    throw new Error("Missing return statement in function");
}

/*var_vector ::= <tAV> expresion <tCV> | epsilon */
  static final public Attributes var_vector(Token t) throws ParseException {Attributes atr=new Attributes();
 Symbol simbolo_del_factor = null;
    try{
        simbolo_del_factor = tabla_simbolos.getSymbol(t.image);
        atr = new Attributes(simbolo_del_factor);
    }catch(SymbolNotFoundException e){
        ErrorSemantico.deteccion(e, t);
    }
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAV:{
        jj_consume_token(tAV);
        atr = expresion();
        jj_consume_token(tCV);
if (atr !=null)  {
      atr.comprobaciones_para_vectores(simbolo_del_factor, t);
    {if ("" != null) return atr;}}
    else {if ("" != null) return new Attributes();}
        break;
        }
      default:
        jj_la1[20] = jj_gen;
{if ("" != null) return atr;}
      }
    } catch (ParseException e) {
errorSintactico(e);
    }
    throw new Error("Missing return statement in function");
}

/*invocacion_procedimiento ::= <tID> argumentos <tPC> */
  static final public void invocacion_procedimiento() throws ParseException {Token t;
 Symbol simbolo_proc = null;
    try {
      t = jj_consume_token(tID);
try{
            simbolo_proc = tabla_simbolos.getSymbol(t.image);
    }catch(SymbolNotFoundException e){
        ErrorSemantico.deteccion(e, t);
    }
      argumentos(simbolo_proc,t);
      jj_consume_token(tPC);
    } catch (ParseException e) {
panic_mode(tPC);
                  errorSintactico(e);
    }
}

/*argumentos ::= <tAP> ( lista_expresiones )? <tCP> */
  static final public void argumentos(Symbol simbolo_proc, Token t) throws ParseException {Attributes atr = null;
    try {
      jj_consume_token(tAP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNOT:
      case tSUMA:
      case tRESTA:
      case tTRUE:
      case tFALSE:
      case tINT2CHAR:
      case tCHAR2INT:
      case tID:
      case tVALORENTERO:
      case tVALORCHAR:
      case tVALORCADENA:
      case tAP:{
        atr = lista_uno_o_mas_exps(simbolo_proc,t);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(tCP);
if(atr == null){
            SemanticFunctions.comprobaciones_para_acciones_sin_parametros(simbolo_proc, t);
        }
    } catch (ParseException e) {
errorSintactico(e);
    }
}

///*lista_expresiones ::= expresion (<tCOMA> expresion)* */
//void lista_expresiones() :
//{}
//{ try{
//  expresion() (<tCOMA> expresion())*
// }catch(ParseException e) {
//	errorSintactico(e);
// }
//}

/*seleccion ::= <tIF> expresion <tTHEN> lista_sentencias (<tELSE> lista_sentencias)? <tEND>*/
  static final public void seleccion() throws ParseException {Attributes atr_e=null;
    try {
      jj_consume_token(tIF);
      atr_e = expresion();
atr_e.comprobacion_tipo(Symbol.Types.BOOL,token);
      jj_consume_token(tTHEN);
      lista_sentencias();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tELSE:{
        jj_consume_token(tELSE);
        lista_sentencias();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(tEND);
    } catch (ParseException e) {
panic_mode(tEND);
          errorSintactico(e);
    }
}

/*mientras_que ::= <tWHILE> expresion <tDO> lista_sentencias <tEND>*/
  static final public void mientras_que() throws ParseException {Attributes atr_e=null;
    try {
      jj_consume_token(tWHILE);
      atr_e = expresion();
atr_e.comprobacion_tipo(Symbol.Types.BOOL,token);
      jj_consume_token(tDO);
      lista_sentencias();
      jj_consume_token(tEND);
    } catch (ParseException e) {
panic_mode(tEND);
          errorSintactico(e);
    }
}

/*expresion := expresion_simple() (operador_relacional() expresion_simple())?*/
  static final public Attributes expresion() throws ParseException {Attributes atr_e1=null,atr_e2=null;
    try {
      atr_e1 = expresion_simple();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tMAYOR:
      case tMENOR:
      case tIGUAL:
      case tMAI:
      case tMEI:
      case tNI:{
        operador_relacional();
        atr_e2 = expresion_simple();
atr_e1.comprobacion_mismo_tipo(atr_e2,token);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } catch (ParseException e) {
errorSintactico(e);
    } finally {
if(atr_e2 != null){if ("" != null) return new Attributes(false);}
  else {if ("" != null) return atr_e1;}
    }
    throw new Error("Missing return statement in function");
}

/*operador_relacional : <tIGUAL> | <tMENOR> | <tMAYOR> | <tMEI> | <tMAI> | <tNI> */
  static final public void operador_relacional() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tIGUAL:{
        jj_consume_token(tIGUAL);
        break;
        }
      case tMENOR:{
        jj_consume_token(tMENOR);
        break;
        }
      case tMAYOR:{
        jj_consume_token(tMAYOR);
        break;
        }
      case tMEI:{
        jj_consume_token(tMEI);
        break;
        }
      case tMAI:{
        jj_consume_token(tMAI);
        break;
        }
      case tNI:{
        jj_consume_token(tNI);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
errorSintactico(e);
    }
}

/* expresion_simple : ( <tSUMA> | <tRESTA> )? termino ( operador_aditivo termino )* */
  static final public Attributes expresion_simple() throws ParseException {Attributes atr_f1=null,atr_f2=null;
boolean positivo_negativo = false;
boolean operador_booleano = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSUMA:
      case tRESTA:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tSUMA:{
          jj_consume_token(tSUMA);
positivo_negativo = true;
          break;
          }
        case tRESTA:{
          jj_consume_token(tRESTA);
positivo_negativo = true;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      atr_f1 = termino();
if(positivo_negativo) atr_f1.comprobacion_tipo(Symbol.Types.INT,token);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tOR:
        case tSUMA:
        case tRESTA:{
          ;
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          break label_9;
        }
        operador_booleano = operador_aditivo();
        atr_f2 = termino();
Attributes.comprobacion_tipo(atr_f1,atr_f2,operador_booleano,token);
      }
    } catch (ParseException e) {
errorSintactico(e);
    } finally {
{if ("" != null) return atr_f1;}
    }
    throw new Error("Missing return statement in function");
}

/* operador_aditivo :=  <tSUMA>| <tRESTA>| <tOR>*/
  static final public boolean operador_aditivo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSUMA:{
        jj_consume_token(tSUMA);
{if ("" != null) return(false);}
        break;
        }
      case tRESTA:{
        jj_consume_token(tRESTA);
{if ("" != null) return(false);}
        break;
        }
      case tOR:{
        jj_consume_token(tOR);
{if ("" != null) return(true);}
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
errorSintactico(e);
    }
    throw new Error("Missing return statement in function");
}

/*termino := factor ( operador_multiplicativo factor )* */
  static final public Attributes termino() throws ParseException {Attributes atr_f1=null,atr_f2=null;
boolean operador_booleano = false;
    try {
      atr_f1 = factor();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tAND:
        case tMOD:
        case tDIV:
        case tMUL:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_10;
        }
        operador_booleano = operador_multiplicativo();
        atr_f2 = factor();
Attributes.comprobacion_tipo(atr_f1, atr_f2, operador_booleano,token);
      }
    } catch (ParseException e) {
errorSintactico(e);
    } finally {
{if ("" != null) return atr_f1;}
    }
    throw new Error("Missing return statement in function");
}

/*operador_multiplicativo :=  <tMUL>| <tMOD>| <tDIV>| <tAND>*/
  static final public boolean operador_multiplicativo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tMUL:{
        jj_consume_token(tMUL);
{if ("" != null) return false;}
        break;
        }
      case tMOD:{
        jj_consume_token(tMOD);
{if ("" != null) return false;}
        break;
        }
      case tDIV:{
        jj_consume_token(tDIV);
{if ("" != null) return false;}
        break;
        }
      case tAND:{
        jj_consume_token(tAND);
{if ("" != null) return true;}
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
errorSintactico(e);
    }
    throw new Error("Missing return statement in function");
}

/*factor := <tNOT> factor | <tAP> expresion <tCP> | <tINT2CHAR> <tAP> expresion <tCP> | <tCHAR2INT> <tAP> expresion <tCP>
| <tID> accion_o_vector | <tCONST_INT>| <tCONST_CHAR>| <tCONST_STRING>| <tTRUE>| <tFALSE>*/
  static final public Attributes factor() throws ParseException {Token t;  Attributes atr_f=null,atr_e; Symbol s=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNOT:{
        jj_consume_token(tNOT);
        atr_f = factor();
atr_f.comprobacion_tipo(Symbol.Types.BOOL,token);
        break;
        }
      case tAP:{
        jj_consume_token(tAP);
        atr_f = expresion();
        jj_consume_token(tCP);
        break;
        }
      case tINT2CHAR:{
        jj_consume_token(tINT2CHAR);
        jj_consume_token(tAP);
        atr_e = expresion();
        jj_consume_token(tCP);
if(atr_e.comprobacion_tipo(Symbol.Types.INT,token)){
            //TODO: int tiene que estár tiene que estar entre 0 y 255 - GC
            atr_f = new Attributes(' ');
        }
        break;
        }
      case tCHAR2INT:{
        jj_consume_token(tCHAR2INT);
        jj_consume_token(tAP);
        atr_e = expresion();
        jj_consume_token(tCP);
if(atr_e.comprobacion_tipo(Symbol.Types.CHAR,token)){
            atr_f = new Attributes(0);
        }
        break;
        }
      case tID:{
        t = jj_consume_token(tID);
        atr_f = funcion_o_vector(t);
        break;
        }
      case tVALORENTERO:{
        t = jj_consume_token(tVALORENTERO);
atr_f = new Attributes(Integer.parseInt(t.image));
        break;
        }
      case tVALORCHAR:{
        t = jj_consume_token(tVALORCHAR);
atr_f =new Attributes(t.image.charAt(0));
        break;
        }
      case tVALORCADENA:{
        t = jj_consume_token(tVALORCADENA);
atr_f = new Attributes(t.image);
        break;
        }
      case tTRUE:{
        jj_consume_token(tTRUE);
atr_f = new Attributes(true);
        break;
        }
      case tFALSE:{
        jj_consume_token(tFALSE);
atr_f = new Attributes(false);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
errorSintactico(e);
    } finally {
{if ("" != null) return atr_f;}
    }
    throw new Error("Missing return statement in function");
}

/*funcion_o_vector := <tAP> lista_cero_o_mas_exps <tCP> | <tAV> expresion <tCV> | /*epsilon* */
  static final public Attributes funcion_o_vector(Token t) throws ParseException {Attributes atr=new Attributes();
 Symbol simbolo_del_factor = null;
    try{
        simbolo_del_factor = tabla_simbolos.getSymbol(t.image);
    }catch(SymbolNotFoundException e){
        ErrorSemantico.deteccion(e, t);
    }
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAP:{
        jj_consume_token(tAP);
atr=null;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tNOT:
        case tSUMA:
        case tRESTA:
        case tTRUE:
        case tFALSE:
        case tINT2CHAR:
        case tCHAR2INT:
        case tID:
        case tVALORENTERO:
        case tVALORCHAR:
        case tVALORCADENA:
        case tAP:{
          atr = lista_uno_o_mas_exps(simbolo_del_factor, t);
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        jj_consume_token(tCP);
if(atr==null)
        SemanticFunctions.comprobaciones_para_acciones_sin_parametros(simbolo_del_factor,t);
    atr = new Attributes(); atr.returnType_al_tipo(simbolo_del_factor);
        break;
        }
      case tAV:{
        jj_consume_token(tAV);
        atr = expresion();
        jj_consume_token(tCV);
atr.comprobaciones_para_vectores(simbolo_del_factor, t);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
atr.asignar_simbolo(simbolo_del_factor);
      }
    } catch (ParseException e) {
errorSintactico(e);
    } finally {
{if ("" != null) return atr;}
    }
    throw new Error("Missing return statement in function");
}

/*lista_uno_o_mas_exps:= expresion() (<tCOMA> expresion())* */
  static final public Attributes lista_uno_o_mas_exps(Symbol simbolo_de_la_accion, Token t) throws ParseException {Attributes atr=new Attributes();
 int indice_parametro = 0;
 SymbolFunction simbolo_funcion = null;
 SymbolProcedure simbolo_procedimiento = null;
    if(simbolo_de_la_accion instanceof SymbolFunction){
        simbolo_funcion = (SymbolFunction) simbolo_de_la_accion;
    }else if(simbolo_de_la_accion instanceof SymbolProcedure){
        simbolo_procedimiento = (SymbolProcedure) simbolo_de_la_accion;
    }else{
        ErrorSemantico.deteccion("el simbolo encontrado no es ni funci\u00f3n ni procedimiento," +
         " y se esta invocando con parametros", t);
    }
    try {
      atr = expresion();
atr.es_parametro_de_accion(simbolo_funcion, simbolo_procedimiento, indice_parametro,t);
    indice_parametro++;
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMA:{
          ;
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          break label_11;
        }
        jj_consume_token(tCOMA);
        atr = expresion();
atr.es_parametro_de_accion(simbolo_funcion, simbolo_procedimiento, indice_parametro,t);
    indice_parametro++;
      }
SemanticFunctions.comprobacion_numero_argumentos(simbolo_funcion, simbolo_procedimiento, indice_parametro,t);
    } catch (ParseException e) {
errorSintactico(e);
    } finally {
{if ("" != null) return atr;}
    }
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_var_vector_683_3_18()
 {
    return false;
  }

  static private boolean jj_3R_invocacion_procedimiento_695_11_12()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_3R_argumentos_711_3_14()) return true;
    return false;
  }

  static private boolean jj_3R_var_asignacion_656_3_15()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_3R_var_vector_675_3_16()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_asignacion_642_3_13()) return true;
    return false;
  }

  static private boolean jj_3R_var_vector_676_3_17()
 {
    if (jj_scan_token(tAV)) return true;
    return false;
  }

  static private boolean jj_3R_var_vector_675_3_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_var_vector_676_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_var_vector_683_3_18()) return true;
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_invocacion_procedimiento_695_11_12()) return true;
    return false;
  }

  static private boolean jj_3R_asignacion_642_3_13()
 {
    if (jj_3R_var_asignacion_656_3_15()) return true;
    if (jj_scan_token(tOPAS)) return true;
    return false;
  }

  static private boolean jj_3R_argumentos_711_3_14()
 {
    if (jj_scan_token(tAP)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public adac_4TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x1800000,0x1800000,0x0,0xc000000,0xc000000,0x0,0x0,0x83800000,0x83800000,0x0,0x83800000,0x0,0x0,0x0,0x300400,0x0,0x0,0x300400,0x0,0x7e000,0x7e000,0x300000,0x300000,0x300200,0x300200,0x401900,0x401900,0x400,0x300400,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x700,0x700,0x1000000,0x8000000,0x0,0x0,0x800000,0x0,0x0,0x1000000,0x8000000,0x400f4,0x400f4,0xf0,0x4,0x8000000,0x1000000,0x8000000,0x26c7800,0x1000000,0x8000000,0x26c7800,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x26c7800,0x26c7800,0xa000000,0x1000000,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public adac_4(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public adac_4(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new adac_4TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public adac_4(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new adac_4TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new adac_4TokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public adac_4(adac_4TokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(adac_4TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[61];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 35; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 61; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
