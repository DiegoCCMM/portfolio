/* adac_4TokenManager.java */
/* Generated By:JavaCC: Do not edit this line. adac_4TokenManager.java */
package traductor;
import lib.symbolTable.SymbolTable;
import lib.symbolTable.*;
import lib.attributes.Attributes;
import lib.symbolTable.exceptions.*;
import lib.errores.*;
import lib.tools.*;
import java.util.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class adac_4TokenManager implements adac_4Constants {
        static void infoLexico(Token t,String nombre) {
        //  System.out.println("("+ t.beginLine+","+t.beginColumn+"): " + nombre +" \""+ t.image+"\"");
        }

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100001000000L) != 0L)
         {
            jjmatchedKind = 50;
            return 16;
         }
         if ((active0 & 0x80100000000L) != 0L)
         {
            jjmatchedKind = 50;
            return 12;
         }
         if ((active0 & 0x67fefe801f00L) != 0L)
         {
            jjmatchedKind = 50;
            return 24;
         }
         return -1;
      case 1:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
            return 15;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
            return 11;
         }
         if ((active0 & 0x67f76f801d00L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
            return 24;
         }
         if ((active0 & 0x890000200L) != 0L)
            return 24;
         return -1;
      case 2:
         if ((active0 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 50;
               jjmatchedPos = 2;
            }
            return 14;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 50;
               jjmatchedPos = 2;
            }
            return 25;
         }
         if ((active0 & 0xd04c001d00L) != 0L)
            return 24;
         if ((active0 & 0x672723800000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 50;
               jjmatchedPos = 2;
            }
            return 24;
         }
         return -1;
      case 3:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
            return 25;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
            return 3;
         }
         if ((active0 & 0x672423800000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
            return 24;
         }
         if ((active0 & 0x80300000000L) != 0L)
            return 24;
         return -1;
      case 4:
         if ((active0 & 0x671003800000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
            return 24;
         }
         if ((active0 & 0x100420000000L) != 0L)
            return 24;
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
            return 3;
         }
         return -1;
      case 5:
         if ((active0 & 0x2000000L) != 0L)
            return 24;
         if ((active0 & 0x673001800000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
            return 24;
         }
         return -1;
      case 6:
         if ((active0 & 0x643001800000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 6;
            return 24;
         }
         if ((active0 & 0x30000000000L) != 0L)
            return 24;
         return -1;
      case 7:
         if ((active0 & 0x601001000000L) != 0L)
            return 24;
         if ((active0 & 0x42000800000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 7;
            return 24;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 57);
      case 41:
         return jjStopAtPos(0, 58);
      case 42:
         return jjStopAtPos(0, 22);
      case 43:
         return jjStopAtPos(0, 20);
      case 44:
         return jjStopAtPos(0, 56);
      case 45:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x2L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 59:
         return jjStopAtPos(0, 55);
      case 60:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x60000L);
      case 61:
         return jjStopAtPos(0, 15);
      case 62:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 91:
         return jjStopAtPos(0, 59);
      case 93:
         return jjStopAtPos(0, 60);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20020000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x440000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800001000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x240000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100001000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x210090000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x5000800000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0xa000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80100000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(1, 1);
         break;
      case 61:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      case 62:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100004000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x802a000000L);
      case 70:
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 24);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x440500000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x210040000100L);
      case 79:
      case 111:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 24);
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000c00L);
      case 82:
      case 114:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 24);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000800000L);
      case 83:
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 24);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x5001000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x440000000000L);
      case 68:
      case 100:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 24);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 24);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 24);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 70:
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 24);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2400000000L);
      case 76:
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 24);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 84:
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 24);
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 24);
         return jjMoveStringLiteralDfa3_0(active0, 0x211002000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 86:
      case 118:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000L);
      case 69:
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 24);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 24);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x20400000000L);
      case 78:
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 24);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x440000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 24);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 24);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000800000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 78:
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 24);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x401001000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 78:
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 24);
         return jjMoveStringLiteralDfa7_0(active0, 0x401000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 24);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 24);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 24);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 82:
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 45, 24);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 84:
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 24);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 24);
         break;
      case 82:
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 24;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAdd(9); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(22, 23); }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 5:
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAdd(9); }
                  break;
               case 18:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if (curChar == 39 && kind > 53)
                     kind = 53;
                  break;
               case 21:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 22:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 23:
                  if (curChar == 34 && kind > 54)
                     kind = 54;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjAddStates(0, 1); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(10); }
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAdd(5); }
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjAddStates(0, 1); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 25:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjAddStates(0, 1); }
                  }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjAddStates(0, 1); }
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 24:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjAddStates(0, 1); }
                  }
                  break;
               case 14:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjAddStates(0, 1); }
                  }
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(10); }
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjAddStates(0, 1); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 3:
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar != 95)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjAddStates(0, 1); }
                  break;
               case 5:
               case 8:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 6:
                  if (curChar != 95)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjAddStates(2, 3); }
                  break;
               case 10:
                  if ((0x2000000020L & l) != 0L && kind > 52)
                     kind = 52;
                  break;
               case 13:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 17:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  { jjAddStates(4, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(4, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 6);
      default :
         return 1;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\76", "\74", "\75", "\76\75", "\74\75", "\74\76", "\72\75", "\53", "\55", "\52", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\73", "\54", "\50", "\51", "\133", "\135", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   3, 0, 7, 8, 22, 23, 
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 8 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            infoLexico(matchedToken,"operador and");
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      infoLexico(matchedToken,"operador or");
         break;
      case 10 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        infoLexico(matchedToken,"operador not");
         break;
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        infoLexico(matchedToken,"operador mod");
         break;
      case 12 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        infoLexico(matchedToken,"operador division");
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                        infoLexico(matchedToken,"operador mayor");
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                        infoLexico(matchedToken,"operador menor");
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                        infoLexico(matchedToken,"operador igual");
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                       infoLexico(matchedToken,"operador mayor o igual");
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                       infoLexico(matchedToken,"operadormenor o igual");
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                      infoLexico(matchedToken,"operador distinto");
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                          infoLexico(matchedToken,"operador asignacion");
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                       infoLexico(matchedToken,"operador suma");
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                        infoLexico(matchedToken,"operador resta");
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                      infoLexico(matchedToken,"operador multiplicacion");
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"procedure");
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"function");
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"return");
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"valor");
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"referencia");
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"is");
         break;
      case 29 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"begin");
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"end");
         break;
      case 31 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"if");
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"then");
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"else");
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                infoLexico(matchedToken,"while");
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                 infoLexico(matchedToken,"do");
         break;
      case 36 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"put_line");
         break;
      case 37 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   infoLexico(matchedToken,"skip_line");
         break;
      case 38 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           infoLexico(matchedToken,"put");
         break;
      case 39 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           infoLexico(matchedToken,"get");
         break;
      case 40 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             infoLexico(matchedToken,"entero");
         break;
      case 41 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               infoLexico(matchedToken,"booleano");
         break;
      case 42 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               infoLexico(matchedToken,"caracter");
         break;
      case 43 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             infoLexico(matchedToken,"true");
         break;
      case 44 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             infoLexico(matchedToken,"false");
         break;
      case 45 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"conversion entero-caracter");
         break;
      case 46 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 infoLexico(matchedToken,"conversion caracter-entero");
         break;
      case 50 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                                                                     infoLexico(matchedToken,"identificador");
         break;
      case 51 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                     infoLexico(matchedToken,"valor entero");
         break;
      case 52 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                 infoLexico(matchedToken,"valor booleano");
         break;
      case 53 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                            infoLexico(matchedToken,"valor caracter");
         break;
      case 54 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                              infoLexico(matchedToken,"valor cadena");
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                                   infoLexico(matchedToken,"punto y coma");
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                                   infoLexico(matchedToken,"coma");
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
                                   infoLexico(matchedToken,"abre parentesis");
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
                                   infoLexico(matchedToken,"cierro parentesis");
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
                                   infoLexico(matchedToken,"abre corchete");
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
                                   infoLexico(matchedToken,"cierro corchete");
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public adac_4TokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public adac_4TokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 24; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1ffc7fffffffff01L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x80L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[24];
    static private final int[] jjstateSet = new int[2 * 24];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
