/* Generated By:JavaCC: Do not edit this line. adac_4Constants.java */
package traductor;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface adac_4Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int tAND = 8;
  /** RegularExpression Id. */
  int tOR = 9;
  /** RegularExpression Id. */
  int tNOT = 10;
  /** RegularExpression Id. */
  int tMOD = 11;
  /** RegularExpression Id. */
  int tDIV = 12;
  /** RegularExpression Id. */
  int tMAYOR = 13;
  /** RegularExpression Id. */
  int tMENOR = 14;
  /** RegularExpression Id. */
  int tIGUAL = 15;
  /** RegularExpression Id. */
  int tMAI = 16;
  /** RegularExpression Id. */
  int tMEI = 17;
  /** RegularExpression Id. */
  int tNI = 18;
  /** RegularExpression Id. */
  int tOPAS = 19;
  /** RegularExpression Id. */
  int tSUMA = 20;
  /** RegularExpression Id. */
  int tRESTA = 21;
  /** RegularExpression Id. */
  int tMUL = 22;
  /** RegularExpression Id. */
  int tPROCEDURE = 23;
  /** RegularExpression Id. */
  int tFUNCTION = 24;
  /** RegularExpression Id. */
  int tRETURN = 25;
  /** RegularExpression Id. */
  int tVAL = 26;
  /** RegularExpression Id. */
  int tREF = 27;
  /** RegularExpression Id. */
  int tIS = 28;
  /** RegularExpression Id. */
  int tBEGIN = 29;
  /** RegularExpression Id. */
  int tEND = 30;
  /** RegularExpression Id. */
  int tIF = 31;
  /** RegularExpression Id. */
  int tTHEN = 32;
  /** RegularExpression Id. */
  int tELSE = 33;
  /** RegularExpression Id. */
  int tWHILE = 34;
  /** RegularExpression Id. */
  int tDO = 35;
  /** RegularExpression Id. */
  int tPUT_L = 36;
  /** RegularExpression Id. */
  int tSKIP_L = 37;
  /** RegularExpression Id. */
  int tPUT = 38;
  /** RegularExpression Id. */
  int tGET = 39;
  /** RegularExpression Id. */
  int tINT = 40;
  /** RegularExpression Id. */
  int tBOOL = 41;
  /** RegularExpression Id. */
  int tCHAR = 42;
  /** RegularExpression Id. */
  int tTRUE = 43;
  /** RegularExpression Id. */
  int tFALSE = 44;
  /** RegularExpression Id. */
  int tINT2CHAR = 45;
  /** RegularExpression Id. */
  int tCHAR2INT = 46;
  /** RegularExpression Id. */
  int DIGITO = 47;
  /** RegularExpression Id. */
  int LETRA = 48;
  /** RegularExpression Id. */
  int BARRA_POR_DELANTE = 49;
  /** RegularExpression Id. */
  int tID = 50;
  /** RegularExpression Id. */
  int tVALORENTERO = 51;
  /** RegularExpression Id. */
  int tVALORBOOLEANO = 52;
  /** RegularExpression Id. */
  int tVALORCHAR = 53;
  /** RegularExpression Id. */
  int tVALORCADENA = 54;
  /** RegularExpression Id. */
  int tPC = 55;
  /** RegularExpression Id. */
  int tCOMA = 56;
  /** RegularExpression Id. */
  int tAP = 57;
  /** RegularExpression Id. */
  int tCP = 58;
  /** RegularExpression Id. */
  int tAV = 59;
  /** RegularExpression Id. */
  int tCV = 60;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"--\"",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\n\"",
    "<token of kind 7>",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"mod\"",
    "\"div\"",
    "\">\"",
    "\"<\"",
    "\"=\"",
    "\">=\"",
    "\"<=\"",
    "\"<>\"",
    "\":=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"procedure\"",
    "\"function\"",
    "\"return\"",
    "\"val\"",
    "\"ref\"",
    "\"is\"",
    "\"begin\"",
    "\"end\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"put_line\"",
    "\"skip_line\"",
    "\"put\"",
    "\"get\"",
    "\"integer\"",
    "\"boolean\"",
    "\"character\"",
    "\"true\"",
    "\"false\"",
    "\"int2char\"",
    "\"char2int\"",
    "<DIGITO>",
    "<LETRA>",
    "<BARRA_POR_DELANTE>",
    "<tID>",
    "<tVALORENTERO>",
    "<tVALORBOOLEANO>",
    "<tVALORCHAR>",
    "<tVALORCADENA>",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
  };

}
